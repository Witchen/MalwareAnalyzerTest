# import pywinauto
#
# app = pywinauto.Application(backend="uia")
# app.start("C:\Program Files\Oracle\VirtualBox\VirtualBox.exe")
#
# dlg = app.window(title_re="Oracle", class_name="Qt5QWindowIcon")    # Class name taken from inspect.exe
# # dlg = app.top_window()
#
# # app.window(title_re="Oracle", class_name="Qt5QWindowIcon").print_control_identifiers()
#
# print "1"
# app.OracleVMVirtualBoxManager.New.click()
# app.CreateVirtualMachine.Cancel.click()
# print "2"


# FileAlyzer Automation
# import pywinauto
# from subprocess import Popen

# Popen("C:\Program Files (x86)\Safer Networking\FileAlyzer 2\FileAlyzer2.exe", shell=True)
#
# desktop = pywinauto.Desktop(backend="uia")
#
# dialog = desktop["OracleVMVirtualBoxManager"]
# dialog.wait("visible")
#
# print "1"
# desktop["Open"]["Cancel"].click()
# # desktop["FileAlyzer2.0.5.57"].menu_select("File->5")
# print desktop["FileAlyzer2.0.5.57"]["2"].print_control_identifiers()
# # desktop["FileAlyzer2.0.5.57"]["2"].click()
# buttonprop = desktop["FileAlyzer2.0.5.57"]["2"].print_control_identifiers()
# print "asdasd"
# print buttonprop
# pywinauto.mouse.click(button='left', coords=(300, 260))
#
# print "2"


# VirtualBox Automation

import pywinauto
from subprocess import Popen

def printinfo(info):
    print "Info: " + str(info)


class Automator(object):

    defaultInstallPath = "C:\Program Files\\"
    backend = "uia"

    def __init__(self, toolInstallPath, toolPath, toolName):
        self.toolInstallPath = toolInstallPath
        self.toolPath = toolPath
        self.toolName = toolName

    def analyze(self):
        executionPath = self.toolInstallPath + self.toolPath
        Popen(executionPath, shell=True)

        desktop = pywinauto.Desktop(backend=Automator.backend)
        dialog = desktop[self.toolName]
        dialog.wait("visible")

        controlstring = dialog.print_control_identifiers()
        print controlstring

        # Find Maximize button. if exists then click it
        maximizeButtonExists = controlstring.find("MaximizeButton")
        if (maximizeButtonExists != -1):
            maximizeButton = dialog["MaximizeButton"]
            maximizeButton.click()
            printinfo("Maximize Button is clicked")
        else:
            printinfo("Maximize Button is not clicked")


# CFFExplorer Analysis Automation
class CFFAutomator(Automator):

    def __init__(self, toolInstallPath=Automator.defaultInstallPath, CFFPath="NTCore\Explorer Suite\CFF Explorer.exe", CFFProcessName="CFFExplorer"):
        Automator.__init__(self, toolInstallPath=toolInstallPath, toolPath=CFFPath, toolName=CFFProcessName)


cffautomator = CFFAutomator()
cffautomator.analyze()


# dialog["New"].click()
# pywinauto.mouse.click(button="left", coords=(440, 210))

# dialog["CreateVirtualMachine"].print_control_identifiers()
# dialog["Type: Down"].print_control_identifiers()

# wrap = dialog["Type: Down"].wrapper_object()

# print dialog["List"].wrapper_object().texts()

# wrap2 = dialog["Version: Down"].wrapper_object()
#
# num = wrap.item_count()
# num2 = wrap2.item_count()
# print str(num) + " Num"
# print str(num2) + " Num"

# sel = wrap.selected_text()

# while True:
#     dialog["Type: DownComboBox"].draw_outline()

# print dialog["Type: Down"].GetProperties()

# dialog["Edit"].print_control_identifiers()
# dialog["Edit"].type_keys("Windows 64bit 32bit")
# dialog["Edit"].TypeKeys("Windows 64bit 32bit")

# dialog["Cancel"].print_control_identifiers()
# pywinauto.mouse.click(button="left", coords=(1200, 800))


### Find Elements
# ele = pywinauto.findwindows.find_elements(control_type="List", backend="uia", top_level_only=False, visible_only=False, process=dialog.process_id())
# print "count = " + str(len(ele))
# for x in ele:
#     print ":::"
#     print "Automation ID = " + str(x.automation_id) + ";",
#     print "Class name = " + str(x.class_name) + ";",
#     print "Name = " + str(x.name) + ";",
#     print "control id = " + str(x.control_id) + ";",
#     print "control type = " + str(x.control_type) + ";",
#     print "element = " + str(x.element) + ";",
#     print "handle = " + str(x.handle) + ";",
#     print "parent = " + str(x.parent) + ";",